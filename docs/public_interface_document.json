{
  "package_name": "com.example_org.my_app",
  "project_description": "The Flutter application is a course management system that allows users to view a list of available courses, add new courses, and interact with course-related features. The application follows the Stacked architecture, which separates concerns and provides a clean separation of business logic, UI, and state management.",
  "architecture_overview": "The application's architecture is based on the Stacked pattern, which promotes a clean separation of concerns. The main components include ViewModels (e.g., HomeViewModel, StartupViewModel) that handle the business logic and state management, Views (e.g., HomeView, StartupView) that represent the UI, and a centralized Service Locator (app.locator.dart) that manages the application's dependencies. The app also utilizes the Stacked Router (app.router.dart) for navigation and routing between different screens.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This file is responsible for configuring the Firebase SDK for the production environment of the application. It provides the necessary information for the app to connect to the correct Firebase project and services.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "firebase_auth",
        "firebase_database",
        "firebase_storage"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This Dart file is responsible for setting up the dialog UI for the application. It defines a central location for managing and registering custom dialog builders, which helps to decouple the dialog implementation from the rest of the application.",
      "class_diagram": "@startuml\nclass DialogType {\n  + infoAlert\n}\n\nclass DialogBuilder {\n  + (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\nDialogType -right-> DialogBuilder\nDialogService o-right-> DialogBuilder\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This function sets up the dialog UI by registering custom dialog builders with the DialogService. It maps each DialogType to its corresponding dialog builder, which is responsible for rendering the appropriate dialog UI.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up and configuring the bottom sheet UI in the application. It defines the different types of bottom sheets that can be displayed and provides a central location for registering their builders.",
      "class_diagram": "@startuml\nclass BottomSheetService {\n  +setCustomSheetBuilders(Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  +notice\n}\n\nclass NoticeSheet {\n  +NoticeSheet(request, completer)\n}\n\nBottomSheetService -- BottomSheetType\nBottomSheetType -- NoticeSheet\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the bottom sheet service with custom builders for each bottom sheet type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for handling analytics-related functionality in the application. It acts as an abstraction layer, encapsulating the implementation details of the analytics service and providing a consistent interface for other parts of the application to interact with.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  +init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, their corresponding views, and provides utility methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter {\n  +final _routes: List<RouteDef>\n  +final _pagesMap: Map<Type, StackedRouteFactory>\n  +get routes(): List<RouteDef>\n  +get pagesMap(): Map<Type, StackedRouteFactory>\n}\n\nclass NavigatorStateExtension {\n  +navigateToHomeView(...)\n  +navigateToStartupView(...)\n  +replaceWithHomeView(...)\n  +replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/ui/views/home/home_view.dart",
        "my_app/ui/views/startup/startup_view.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/services/course_service.dart",
      "description": "The CourseService class is responsible for managing the lifecycle of courses in the application. It provides the core functionality for fetching, creating, updating, and deleting courses, acting as a bridge between the UI and the underlying data repository.",
      "class_diagram": "@startuml\nclass CourseService {\n  - _repository: CourseRepository\n  + getCourses(): List<Course>\n  + addCourse(course: Course): Future<void>\n  + removeCourse(courseId: String): Future<void>\n  + updateCourse(course: Course): Future<void>\n  + getCourseById(id: String): Course?\n}\n\nCourseService o-- CourseRepository\n@enduml",
      "methods": [
        {
          "name": "getCourses",
          "description": "Retrieves the list of all courses from the repository.",
          "parameters": null,
          "return_type": "List<Course>"
        },
        {
          "name": "addCourse",
          "description": "Adds a new course to the repository.",
          "parameters": [
            "course: Course"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "removeCourse",
          "description": "Removes a course from the repository by its ID.",
          "parameters": [
            "courseId: String"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateCourse",
          "description": "Updates an existing course in the repository.",
          "parameters": [
            "course: Course"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "getCourseById",
          "description": "Retrieves a course from the repository by its ID.",
          "parameters": [
            "id: String"
          ],
          "return_type": "Course?"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/features/courses/course_repository.dart",
        "my_app/models/course.dart"
      ]
    },
    {
      "name": "lib/features/courses/widgets/add_course_form.dart",
      "description": "The `AddCourseForm` widget is responsible for providing a form interface that allows users to input details about a new course, such as the course name, professor, schedule, credits, and description. This form is used to create a new `Course` object, which can then be submitted to the application for storage or further processing.",
      "class_diagram": "@startuml\nclass AddCourseForm {\n  -GlobalKey<FormState> _formKey\n  -TextEditingController _nameController\n  -TextEditingController _professorController\n  -TextEditingController _scheduleController\n  -TextEditingController _creditsController\n  -TextEditingController _descriptionController\n  +Function(Course) onSubmit\n  +State<AddCourseForm> createState()\n  -void _submitForm()\n}\n@enduml",
      "methods": [
        {
          "name": "createState",
          "description": "Creates the state object for the `AddCourseForm` widget.",
          "parameters": null,
          "return_type": "State<AddCourseForm>"
        },
        {
          "name": "_submitForm",
          "description": "Validates the form fields and creates a new `Course` object with the user-provided data. The `onSubmit` callback is then called with the new `Course` object, and the form is closed.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/models/course.dart",
        "package:my_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This Dart file defines the `InfoAlertDialog` class, which is responsible for displaying an information alert dialog in the application's user interface. The dialog is used to convey important information to the user, such as updates, notifications, or instructions.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?)\n  +viewModelBuilder(BuildContext)\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the visual elements of the information alert dialog. It takes the dialog request, view model, and optional child widget as parameters and returns the final widget tree.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `InfoAlertDialogModel` to be used as the view model for the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This file defines a set of constant color values that are used throughout the application's user interface. It provides a centralized location for managing the application's color palette, making it easier to maintain a consistent visual style across different screens and components.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The `NoticeSheetModel` class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It is a view model that extends the `BaseViewModel` class from the `stacked` package, which provides a foundation for implementing the MVVM (Model-View-ViewModel) architectural pattern.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up the dependency injection and service locator for the application. It is a core part of the application's architecture, providing a central registry for all the services and dependencies used throughout the codebase.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the various services and dependencies that the application uses. It sets up the StackedLocator instance, which acts as the central service registry.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for rendering a reusable bottom sheet UI component that displays a notice or alert message to the user. It is part of the UI layer of the application and is used to present important information or updates to the user in a clear and visually appealing way.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  -Function(SheetResponse)? completer\n  -SheetRequest request\n  +builder(BuildContext, NoticeSheetModel, Widget?)\n  +viewModelBuilder(BuildContext): NoticeSheetModel\n}\n\nclass NoticeSheetModel {\n}\n\nNoticeSheet --> NoticeSheetModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The `builder` method is responsible for constructing the UI of the `NoticeSheet` widget. It takes the current `BuildContext`, the `NoticeSheetModel` instance, and an optional child widget as parameters, and returns the final widget tree to be rendered.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `NoticeSheetModel` class, which is used to manage the state and logic of the `NoticeSheet` widget.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a set of reusable UI helper functions and constants that can be used across the Flutter application. It aims to establish a consistent and responsive user interface by providing standardized spacing, font sizes, and screen size utilities.",
      "class_diagram": "@startuml\n\nclass UIHelpers {\n  +static final horizontalSpaceTiny: Widget\n  +static final horizontalSpaceSmall: Widget\n  +static final horizontalSpaceMedium: Widget\n  +static final horizontalSpaceLarge: Widget\n  +static final verticalSpaceTiny: Widget\n  +static final verticalSpaceSmall: Widget\n  +static final verticalSpaceMedium: Widget\n  +static final verticalSpaceLarge: Widget\n  +static final verticalSpaceMassive: Widget\n  +static Widget spacedDivider\n  +static Widget verticalSpace(double height)\n  +static double screenWidth(BuildContext context)\n  +static double screenHeight(BuildContext context)\n  +static double screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  +static double screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  +static double halfScreenWidth(BuildContext context)\n  +static double thirdScreenWidth(BuildContext context)\n  +static double quarterScreenWidth(BuildContext context)\n  +static double getResponsiveHorizontalSpaceMedium(BuildContext context)\n  +static double getResponsiveSmallFontSize(BuildContext context)\n  +static double getResponsiveMediumFontSize(BuildContext context)\n  +static double getResponsiveLargeFontSize(BuildContext context)\n  +static double getResponsiveExtraLargeFontSize(BuildContext context)\n  +static double getResponsiveMassiveFontSize(BuildContext context)\n  +static double getResponsiveFontSize(BuildContext context, {double? fontSize, double? max})\n}\n\n@enduml",
      "methods": [
        {
          "name": "screenWidth",
          "description": "Returns the width of the screen in the current BuildContext.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "Returns the height of the screen in the current BuildContext.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Returns a fraction of the screen height, optionally with an offset and maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "screenWidthFraction",
          "description": "Returns a fraction of the screen width, optionally with an offset and maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth",
          "description": "Returns half the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "thirdScreenWidth",
          "description": "Returns one-third the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "quarterScreenWidth",
          "description": "Returns one-quarter the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Returns a responsive horizontal spacing value, adjusted for the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Returns a responsive small font size, adjusted for the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMediumFontSize",
          "description": "Returns a responsive medium font size, adjusted for the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveLargeFontSize",
          "description": "Returns a responsive large font size, adjusted for the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveExtraLargeFontSize",
          "description": "Returns a responsive extra-large font size, adjusted for the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMassiveFontSize",
          "description": "Returns a responsive massive font size, adjusted for the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Returns a responsive font size, adjusted for the screen width, with an optional maximum value.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the application's user interface. It is responsible for setting up the overall application structure, including the navigation, localization, and other core UI-related functionality.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView o-- _App\nAppView *-- AppViewModel\n_App *-- StackedService\n_App *-- ScreenObserver\n_App *-- Routes\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the application's main UI, including the MaterialApp, navigation, and other core UI components.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main screen of the app, which displays a counter and provides buttons to interact with the app's functionality.",
      "class_diagram": "@startuml\nclass HomeView extends StackedView<HomeViewModel> {\n  + builder(BuildContext, HomeViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n  + counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the home screen, including a counter, a button to increment the counter, and buttons to show a dialog and a bottom sheet.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Constructs the `HomeViewModel` instance that drives the business logic for the home screen.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gap/gap.dart",
        "package:my_app/ui/views/home/home_viewmodel.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and logic related to the home screen of the application. It provides functionality for incrementing a counter, displaying a dialog, and showing a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  -_dialogService: DialogService\n  -_bottomSheetService: BottomSheetService\n  -_counter: int\n  +counterLabel: String\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter and rebuilds the UI to reflect the new value.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title, description, and a variant of DialogType.infoAlert.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title, description, and a variant of BottomSheetType.notice.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The `StartupViewModel` class is responsible for handling the initial startup logic and navigation of the application. It is part of the MVVM (Model-View-ViewModel) architecture used in the application, where it represents the ViewModel component.",
      "class_diagram": "@startuml\nclass StartupViewModel {\n  -final _navigationService: NavigationService\n  +Future runStartupLogic()\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method encapsulates the startup logic for the application. It is responsible for performing any necessary initialization or setup tasks before the main application is loaded. In this case, it simply delays for 3 seconds and then navigates to the home view of the application.",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:my_app/app/app.locator.dart",
        "package:my_app/app/app.router.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides a set of utility functions for interacting with contacts, such as launching WhatsApp and sending emails. It abstracts away the platform-specific details and provides a simple, cross-platform API for these common contact-related actions.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp application and initiates a conversation with the specified phone number. Optionally, a text message can be included.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email application and creates a new email message with the specified email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This Dart file defines an exception class, `APIException`, that is used to handle and propagate errors that occur in the API service layer of the application.",
      "class_diagram": "@startuml\nclass APIException implements Exception {\n  -dynamic message\n  +toString(): String\n}\n@enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "The constructor for the `APIException` class. It takes an optional `message` parameter, which can be any dynamic value, and stores it in the `message` field.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "The `toString` method overrides the default implementation to provide a string representation of the `APIException` object, which includes the runtime type and the `message` value.",
          "parameters": [],
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This Dart file contains a set of constant variables that define various application-wide configurations and settings. It serves as a centralized location for storing and managing common constants used throughout the application.",
      "class_diagram": "",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "The `color_extension.dart` file provides a utility extension on the `Color` class in Flutter, allowing for easy conversion of hexadecimal color codes to `Color` objects. This extension simplifies the process of working with colors in the application, making it more efficient to define and use consistent color schemes.",
      "class_diagram": "@startuml\n\nclass Color {\n  +static fromHex(String): Color\n  +static intFromHex(String): int\n}\n\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color code string to a `Color` object. The input string can be with or without the leading '#' character, and the function will handle both cases.",
          "parameters": [
            "String hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color code string to an integer value representing the color. The input string can be with or without the leading '#' character, and the function will handle both cases.",
          "parameters": [
            "String hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The `JsonUtil` class provides utility functions for working with JSON data in the application. It is responsible for handling common JSON-related tasks, such as formatting maps, safely converting JSON to Dart objects, and formatting lists of JSON maps.",
      "class_diagram": "@startuml\n  class JsonUtil {\n    + static formatMap(Map<dynamic, dynamic>) : Map<String, dynamic>\n    + static fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>)) : T?\n    + static formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>)) : List<T>\n  }\n  @enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Formats a dynamic JSON map to a strongly-typed `Map<String, dynamic>`.",
          "parameters": [
            "Map<dynamic, dynamic>"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Safely converts a dynamic JSON value to a Dart object of type `T`, or returns `null` if the input is invalid.",
          "parameters": [
            "dynamic",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Formats a list of dynamic JSON maps to a list of Dart objects of type `T`.",
          "parameters": [
            "List<dynamic>",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This file defines a utility class `Flavors` that is responsible for managing and storing the current app flavor (development, production, etc.). It provides a simple interface for checking the current flavor and determining if the app is running in a development or production environment.",
      "class_diagram": "@startuml\n  class Flavors {\n    - _instance: Flavors\n    + factory Flavors()\n    + static Flavor? flavor\n    + static bool get isDev()\n    + static bool get isProd()\n  }\n  @enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class, used to ensure a singleton instance.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "factory Flavors",
          "description": "Factory constructor that returns the singleton instance of the Flavors class.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "isDev",
          "description": "Getter that returns true if the current app flavor is Flavor.development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Getter that returns true if the current app flavor is Flavor.production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The DateUtil class provides utility functions for working with date and time data, particularly for handling different date/time representations used in the application.",
      "class_diagram": "@startuml\nclass DateUtil {\n  +static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts a dynamic value (which could be a Timestamp, String, or DateTime) into a DateTime object.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class is responsible for displaying the initial startup screen of the application. It provides a visually appealing and informative UI to the user while the application is loading and initializing.",
      "class_diagram": "@startuml\nclass StartupView {\n  +builder(BuildContext, StartupViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): StartupViewModel\n  +onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  +runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, including the app title and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Triggers the `runStartupLogic()` method on the `StartupViewModel` when the view is ready.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This file defines the Flavor enum, which represents the different app flavors or builds (e.g., production, development) used in the application.",
      "class_diagram": "@startuml\n  enum Flavor {\n    production\n    development\n  }\n  @enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This file contains the Firebase configuration options for the development environment. It provides the necessary credentials and settings to initialize the Firebase services in the development version of the application.",
      "class_diagram": "```plantuml\nclass FirebaseOptions {\n  final String apiKey\n  final String appId\n  final String messagingSenderId\n  final String projectId\n  final String storageBucket\n}\n```",
      "methods": [
        {
          "name": "firebase_options_development",
          "description": "This method returns the FirebaseOptions instance with the necessary configuration for the development environment.",
          "parameters": null,
          "return_type": "FirebaseOptions"
        }
      ],
      "dependencies": [
        "firebase_core",
        "firebase_core_platform_interface"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver is responsible for tracking the screen views of the application using an AnalyticService. It acts as a NavigatorObserver to intercept navigation events and record the corresponding screen views.",
      "class_diagram": "@startuml\nclass ScreenObserver implements NavigatorObserver {\n  + didPush(Route, Route?): void\n  + didReplace(newRoute: Route?, oldRoute: Route?): void\n  + didPop(Route, Route?): void\n  - _trackScreenView(Route): void\n}\n\nScreenObserver ..> AnalyticService : uses\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Called when a new route is pushed onto the Navigator.",
          "parameters": [
            "Route<dynamic>",
            "Route<dynamic>?"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Called when a route is replaced with a new route.",
          "parameters": [
            "newRoute: Route<dynamic>?",
            "oldRoute: Route<dynamic>?"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Called when a route is popped off the Navigator.",
          "parameters": [
            "Route<dynamic>",
            "Route<dynamic>?"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Tracks the screen view using the AnalyticService.",
          "parameters": [
            "Route<dynamic>"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/models/course.dart",
      "description": "The `Course` class in this file represents a university course, encapsulating its key information such as the course ID, name, professor, schedule, credits, and description. It provides a data model for managing course-related data in the application.",
      "class_diagram": "@startuml\nclass Course {\n  -String id\n  -String name\n  -String professor\n  -String schedule\n  -int credits\n  -String description\n  +Course({required id, required name, required professor, required schedule, required credits, required description})\n  +copyWith({id, name, professor, schedule, credits, description})\n  +toJson(): Map<String, dynamic>\n  +fromJson(Map<String, dynamic>): Course\n  +get props: List<Object?>\n}\n@enduml",
      "methods": [
        {
          "name": "Course",
          "description": "The constructor for the `Course` class, which initializes the course's properties.",
          "parameters": [
            "id",
            "name",
            "professor",
            "schedule",
            "credits",
            "description"
          ],
          "return_type": "Course"
        },
        {
          "name": "copyWith",
          "description": "Creates a new `Course` instance with the specified properties updated, allowing for partial updates.",
          "parameters": [
            "id",
            "name",
            "professor",
            "schedule",
            "credits",
            "description"
          ],
          "return_type": "Course"
        },
        {
          "name": "toJson",
          "description": "Converts the `Course` object into a JSON-serializable Map.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "Constructs a `Course` object from a JSON Map.",
          "parameters": [
            "Map<String, dynamic>"
          ],
          "return_type": "Course"
        },
        {
          "name": "props",
          "description": "Returns a list of the course's properties, used for equality comparison and hashing.",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This Dart file defines the supported locales and localization delegates for the application. It is responsible for managing the internationalization and localization of the app, ensuring that the user interface and content can be displayed in multiple languages.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Returns the list of localization delegates used by the app. These delegates are responsible for loading the appropriate language-specific resources.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Returns the list of locales supported by the app. This determines the languages that the user can select from to view the app's content.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "package:flutter/widgets.dart",
        "package:flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/features/courses/courses_viewmodel.dart",
      "description": "The CoursesViewModel class is responsible for managing the state and functionality related to courses in the application. It serves as the view model for the courses feature, providing an abstraction layer between the UI and the underlying data and services.",
      "class_diagram": "@startuml\nclass CoursesViewModel {\n  +List<Course> get courses\n  +Future<void> addCourse(Course course)\n  +Future<void> removeCourse(String courseId)\n}\n\nCoursesViewModel *-- CourseService\n@enduml",
      "methods": [
        {
          "name": "get courses",
          "description": "Returns the list of courses managed by the CoursesViewModel.",
          "parameters": null,
          "return_type": "List<Course>"
        },
        {
          "name": "addCourse",
          "description": "Adds a new course to the list of courses managed by the CoursesViewModel.",
          "parameters": [
            "Course course"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "removeCourse",
          "description": "Removes a course from the list of courses managed by the CoursesViewModel.",
          "parameters": [
            "String courseId"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/models/course.dart",
        "my_app/services/course_service.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This Dart file provides a convenient extension on the `BuildContext` class that simplifies access to the current `AppLocalizations` instance, which is responsible for managing the localization and internationalization of the application's user interface.",
      "class_diagram": "@startuml\nclass BuildContext {\n}\n\nclass AppLocalizations {\n  + static AppLocalizations of(BuildContext context)\n}\n\nclass LocalizationsX {\n  + AppLocalizations get localizations\n}\n\nBuildContext <|-- LocalizationsX\nAppLocalizations <-- LocalizationsX\n@enduml",
      "methods": [
        {
          "name": "get localizations",
          "description": "Retrieves the current `AppLocalizations` instance associated with the `BuildContext`. This is a convenient way to access the localization functionality without having to call `AppLocalizations.of(context)` directly.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the main production application view, the `AppView`, using the `bootstrap` function from `main/bootstrap.dart`. It sets the application flavor to 'production' and initializes the app with the necessary setup.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application. It calls the `bootstrap` function with the `AppView` as the builder and sets the application flavor to 'production'.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "main/bootstrap.dart",
        "models/enums/flavor.dart",
        "ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This Dart file is responsible for bootstrapping the Flutter application. It sets up the initial application configuration, including the app's flavor, dependency injection, and custom UI components like dialogs and bottom sheets. The main purpose of this file is to provide a centralized and consistent way to initialize the app and ensure a smooth startup process.",
      "class_diagram": "@startuml\n\nclass Bootstrap {\n  +Future<void> bootstrap({\n    required FutureOr<Widget> Function() builder,\n    required Flavor flavor\n  })\n}\n\n@enduml",
      "methods": [
        {
          "name": "bootstrap",
          "description": "The main entry point for bootstrapping the application. It sets up the app's flavor, initializes the dependency injection, sets up custom UI components, and runs the app with the provided builder function.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "my_app/models/enums/flavor.dart",
        "my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class is responsible for managing the state and behavior of the application's main view. It is a part of the MVVM (Model-View-ViewModel) architectural pattern used in the Flutter application.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "This Dart file is responsible for managing the localization and internationalization (i18n) functionality of the application. It serves as a centralized hub for accessing and handling localized app resources, ensuring a consistent and multilingual user experience.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "lib/l10n/localizations_extension.dart",
        "lib/l10n/supported_locales.dart"
      ]
    },
    {
      "name": "lib/features/courses/widgets/course_card.dart",
      "description": "This file defines a `CourseCard` widget, which is responsible for displaying the details of a single course in a user-friendly card layout. It is a key component in the application's course management feature, providing a visual representation of the course information.",
      "class_diagram": "@startuml\nclass CourseCard {\n  + final Course course\n  + final VoidCallback onDelete\n  + build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the visual representation of the `CourseCard` widget, including the course name, professor, schedule, and credits. It also provides a delete button to allow the user to remove the course.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/models/course.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/courses/courses_view.dart",
      "description": "The CoursesView class is responsible for displaying a list of courses and providing functionality to add new courses. It acts as the main UI component for the courses feature in the application.",
      "class_diagram": "@startuml\nclass CoursesView {\n  +build(context: BuildContext): Widget\n}\n\nclass CoursesViewModel {\n  +isBusy: bool\n  +courses: List<Course>\n  +addCourse(course: Course): void\n  +removeCourse(courseId: String): void\n}\n\nclass AddCourseForm {\n  +onSubmit(course: Course): void\n}\n\nclass CourseCard {\n  +course: Course\n  +onDelete(courseId: String): void\n}\n\nCoursesView *-- CoursesViewModel\nCoursesView *-- AddCourseForm\nCoursesView *-- CourseCard\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the CoursesView, including the app bar, floating action button, and the list of courses.",
          "parameters": [
            "context: BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/courses/courses_viewmodel.dart",
        "package:my_app/features/courses/widgets/add_course_form.dart",
        "package:my_app/features/courses/widgets/course_card.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/courses/course_repository.dart",
      "description": "The CourseRepository class is responsible for managing the CRUD (Create, Read, Update, Delete) operations for courses in the application. It serves as the central data access point for the courses feature, providing a consistent and reliable way to interact with the course data.",
      "class_diagram": "@startuml\nclass CourseRepository {\n  -List<Course> _courses\n  +List<Course> getCourses()\n  +Future<void> addCourse(Course course)\n  +Future<void> removeCourse(String courseId)\n  +Future<void> updateCourse(Course updatedCourse)\n  +Course? getCourseById(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "getCourses",
          "description": "Retrieves a list of all courses, returning an unmodifiable copy.",
          "parameters": null,
          "return_type": "List<Course>"
        },
        {
          "name": "addCourse",
          "description": "Adds a new course to the list of courses.",
          "parameters": [
            "Course course"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "removeCourse",
          "description": "Removes a course from the list of courses by its ID.",
          "parameters": [
            "String courseId"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateCourse",
          "description": "Updates an existing course in the list of courses.",
          "parameters": [
            "Course updatedCourse"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "getCourseById",
          "description": "Retrieves a course by its ID, returning null if not found.",
          "parameters": [
            "String id"
          ],
          "return_type": "Course?"
        }
      ],
      "dependencies": [
        "my_app/models/course.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for bootstrapping the development version of the application. It sets up the initial state and configuration for the app, and launches the main UI component.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The entry point of the application. It calls the `bootstrap` function to initialize the app with the `AppView` as the root widget and the `Flavor.development` configuration.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> HomeView: Update UI\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each view has a corresponding ViewModel that handles the business logic and state for that view. The ViewModels use observable properties and notifiers to update the UI when the state changes. The app.locator.dart file sets up the dependency injection, allowing the ViewModels to access necessary services and repositories.",
  "navigation_flow": "The navigation flow of the application is managed using the Stacked Router, which is defined in the app.router.dart file. The AppView sets up the initial route, which is the StartupView. After the startup logic is completed, the StartupViewModel navigates to the HomeView. The user can then interact with the HomeView, triggering actions that may result in the display of dialogs or bottom sheets, managed by the HomeViewModel."
}